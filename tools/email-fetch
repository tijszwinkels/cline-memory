#!/usr/bin/env python3
import argparse
import imaplib
import email
import os
import sys
import socket
from datetime import datetime, timedelta
from email.header import decode_header
import json
import getpass
from pathlib import Path
try:
    from dotenv import load_dotenv
except ImportError:
    print("Installing required package: python-dotenv")
    os.system('pip install python-dotenv')
    from dotenv import load_dotenv

def parse_date(date_str):
    """Parse date string in YYYY-MM-DD format"""
    try:
        return datetime.strptime(date_str, '%Y-%m-%d')
    except ValueError:
        print(f"Error: Invalid date format. Please use YYYY-MM-DD")
        sys.exit(1)

def decode_email_header(header):
    """Decode email header"""
    decoded_parts = decode_header(header)
    decoded_str = ''
    for part, encoding in decoded_parts:
        if isinstance(part, bytes):
            decoded_str += part.decode(encoding or 'utf-8', errors='replace')
        else:
            decoded_str += part
    return decoded_str

def get_credentials():
    """Get email credentials from .env file, environment variables, or prompt"""
    # Try to load from .env file in the same directory as the script
    script_dir = Path(__file__).parent
    env_file = script_dir / '.env'
    
    if env_file.exists():
        load_dotenv(env_file)
    
    # Try environment variables
    email = os.getenv('EMAIL_USER')
    password = os.getenv('EMAIL_PASS')
    server = os.getenv('EMAIL_SERVER', 'imap.gmail.com')
    
    # Prompt if not found
    if not email:
        email = input("Email: ")
    if not password:
        password = getpass.getpass("Password: ")
        
    return email, password, server

def fetch_emails(args):
    """Fetch and filter emails"""
    email_user, email_pass, imap_server = get_credentials()
    
    try:
        # Connect to IMAP server with timeout
        socket.setdefaulttimeout(30)  # 30 second timeout
        print(f"Connecting to {imap_server}...")
        mail = imaplib.IMAP4_SSL(imap_server)
        
        print("Logging in...")
        mail.login(email_user, email_pass)
        mail.select('inbox')
        
        # Build search criteria
        search_criteria = []
        
        # Default to last 30 days if no date specified
        if args.since:
            date_since = parse_date(args.since)
        else:
            date_since = datetime.now() - timedelta(days=30)
        search_criteria.append(f'SINCE {date_since.strftime("%d-%b-%Y")}')
        
        # Add OR search for subject, from, and to fields
        if args.search:
            search_term = args.search.replace('"', '\\"')  # Escape quotes in search term
            search_criteria.append(f'OR OR SUBJECT "{search_term}" FROM "{search_term}" TO "{search_term}"')
        
        # Search emails
        search_query = '(' + ' '.join(search_criteria) + ')' if search_criteria else 'ALL'
        print("Searching emails...")
        _, messages = mail.search(None, search_query)
        
        message_nums = messages[0].split()[::-1]  # Reverse to get newest first
        to_fetch = min(len(message_nums), args.n if args.n else len(message_nums))
        
        if len(message_nums) == 0:
            print("No matching messages found.")
            return
            
        print(f"Found {len(message_nums)} matching messages, fetching {to_fetch}...")
        
        # Process emails
        emails = []
        for i, num in enumerate(message_nums[:to_fetch]):
            if i % 5 == 0:  # Update progress every 5 messages
                print(f"Processing message {i + 1}/{to_fetch}...", end='\r')
                
            _, msg = mail.fetch(num, '(RFC822)')
            email_body = msg[0][1]
            email_message = email.message_from_bytes(email_body)
            
            subject = decode_email_header(email_message['subject'])
            from_addr = decode_email_header(email_message['from'])
            date = email_message['date']
            to_addr = decode_email_header(email_message['to'])
                
            # Get email body
            body = ""
            if email_message.is_multipart():
                for part in email_message.walk():
                    if part.get_content_type() == "text/plain":
                        try:
                            body = part.get_payload(decode=True).decode()
                            break
                        except:
                            continue
                    elif part.get_content_type() == "text/html":
                        try:
                            # Only use HTML if we haven't found plain text
                            if not body:
                                import html2text
                                h = html2text.HTML2Text()
                                h.ignore_links = False
                                body = h.handle(part.get_payload(decode=True).decode())
                        except:
                            continue
            else:
                try:
                    body = email_message.get_payload(decode=True).decode()
                except:
                    body = email_message.get_payload()

            emails.append({
                'subject': subject,
                'from': from_addr,
                'to': to_addr,
                'date': date,
                'body': body.strip() if body else "No text content available"
            })
        
        print("\n")  # Clear progress line
        
        # Output results
        for email_data in emails:
            print(f"From: {email_data['from']}")
            print(f"To: {email_data['to']}")
            print(f"Date: {email_data['date']}")
            print(f"Subject: {email_data['subject']}")
            print("\nContent:")
            print(email_data['body'])
            print("\n" + "=" * 80 + "\n")
            
    except imaplib.IMAP4.error as e:
        print(f"IMAP error: {e}")
        sys.exit(1)
    except socket.timeout:
        print("Connection timed out. Please try again.")
        sys.exit(1)
    except socket.gaierror:
        print(f"Could not connect to {imap_server}. Please check your internet connection and server address.")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)
    finally:
        try:
            mail.close()
            mail.logout()
        except:
            pass

def main():
    parser = argparse.ArgumentParser(description='Fetch and filter emails')
    parser.add_argument('-n', type=int, default=100,
                      help='Number of emails to display (default: 100)')
    parser.add_argument('--since', type=str,
                      help='Show emails since date (YYYY-MM-DD). Defaults to last 30 days.')
    parser.add_argument('--search', type=str,
                      help='Search in subject, from, and to fields')
    
    args = parser.parse_args()
    fetch_emails(args)

if __name__ == '__main__':
    main()
