#!/bin/bash

# Usage information
usage() {
    echo "Usage: transcribe [-n LINES] [-a] INPUT"
    echo "Transcribe audio/video files or YouTube URLs to text using Whisper"
    echo
    echo "Options:"
    echo "  -n LINES    Number of lines to display (default: 100)"
    echo "  -a          Force using OpenAI's Whisper API"
    echo "  -h          Display this help message"
    echo
    echo "Input can be:"
    echo "  - Path to an audio file (mp3, wav, m4a, etc.)"
    echo "  - Path to a video file (mp4, mkv, etc.)"
    echo "  - YouTube URL"
    echo
    echo "By default, tries to use:"
    echo "1. whisper.cpp with Metal acceleration (fastest)"
    echo "2. Local Python whisper package"
    echo "3. OpenAI Whisper API (requires API key)"
}

# Default settings
num_lines=100
force_api=false

# Parse command line options
while getopts "n:ah" opt; do
    case $opt in
        n) num_lines=$OPTARG ;;
        a) force_api=true ;;
        h) usage; exit 0 ;;
        \?) echo "Invalid option: -$OPTARG" >&2; usage; exit 1 ;;
    esac
done

# Shift past the options
shift $((OPTIND-1))

# Check if input is provided
if [ $# -eq 0 ]; then
    echo "Error: No input provided" >&2
    usage
    exit 1
fi

input="$1"
temp_dir="/tmp/transcribe_$$"
mkdir -p "$temp_dir"
trap 'rm -rf "$temp_dir"' EXIT

# Function to check if a command exists
check_command() {
    if ! command -v "$1" &> /dev/null; then
        return 1
    fi
    return 0
}

# Check for required commands
if ! check_command curl; then
    echo "Error: curl is required but not installed" >&2
    exit 1
fi
if ! check_command ffmpeg; then
    echo "Error: ffmpeg is required but not installed" >&2
    exit 1
fi

# Function to try whisper.cpp transcription
try_whisper_cpp() {
    local audio_file="$1"
    local output_file="$temp_dir/output.txt"
    local whisper_path="$HOME/cline/external/whisper.cpp"
    local model_path="$whisper_path/models/ggml-large-v3-turbo.bin"
    local main_exe="$whisper_path/build/bin/main"
    
    # Check if whisper.cpp is available
    if [ ! -f "$main_exe" ] || [ ! -f "$model_path" ]; then
        return 1
    fi
    
    echo "Transcribing using whisper.cpp with Metal acceleration..." >&2
    
    if ! "$main_exe" \
        -m "$model_path" \
        -f "$audio_file" \
        -otxt \
        -of "$temp_dir/output" \
        --print-progress false \
        --print-special false \
        --no-timestamps; then
        return 1
    fi
    
    if [ ! -f "$output_file" ]; then
        return 1
    fi
    
    cat "$output_file" | sed 's/\. /.\n\n/g' | head -n "$num_lines"
    return 0
}

# Function to try Python whisper package
try_python_whisper() {
    local audio_file="$1"
    
    # Check if whisper command is available
    if ! check_command whisper; then
        return 1
    fi
    
    echo "Transcribing using local Python Whisper model..." >&2
    
    if ! whisper "$audio_file" --output_dir "$temp_dir" --output_format txt; then
        return 1
    fi
    
    # Get the output file (will have same name as input but with .txt extension)
    local output_file="$temp_dir/$(basename "$audio_file" .wav).txt"
    if [ ! -f "$output_file" ]; then
        return 1
    fi
    
    cat "$output_file" | sed 's/\. /.\n\n/g' | head -n "$num_lines"
    return 0
}

# Function to try OpenAI Whisper API
try_whisper_api() {
    local audio_file="$1"
    
    # Check if OPENAI_API_KEY is set
    if [ -z "$OPENAI_API_KEY" ]; then
        echo "Error: OPENAI_API_KEY environment variable is not set" >&2
        echo "Please set it with: export OPENAI_API_KEY='your-api-key'" >&2
        return 1
    fi

    echo "Transcribing using OpenAI Whisper API..." >&2
    response=$(curl -s -X POST https://api.openai.com/v1/audio/transcriptions \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -H "Content-Type: multipart/form-data" \
        -F file="@$audio_file" \
        -F model="whisper-1")

    # Check if the API call was successful
    if [[ "$response" == *"error"* ]]; then
        echo "Error: OpenAI API request failed" >&2
        echo "$response" >&2
        return 1
    fi

    echo "$response" | grep -o '"text": *"[^"]*"' | cut -d'"' -f4 | sed 's/\. /.\n\n/g' | head -n "$num_lines"
    return 0
}

# Function to prepare audio file
prepare_audio() {
    local input="$1"
    local output="$temp_dir/audio.wav"
    
    echo "Converting to wav..." >&2
    if ! ffmpeg -i "$input" -vn -acodec pcm_s16le -ar 16000 -ac 1 -y "$output" 2>/dev/null; then
        echo "Error: Failed to process audio from: $input" >&2
        exit 1
    fi
    echo "$output"
}

# Function to handle YouTube URLs
handle_youtube() {
    local url="$1"
    local output_file="$temp_dir/audio.wav"
    
    # Check for yt-dlp
    if ! check_command yt-dlp; then
        echo "Error: yt-dlp is required but not installed" >&2
        return 1
    fi
    
    echo "Downloading from YouTube..." >&2
    
    # Download audio from YouTube directly to wav format
    if ! yt-dlp --quiet -x --audio-format wav \
         --postprocessor-args "-ar 16000 -ac 1" \
         --output "$temp_dir/audio.%(ext)s" "$url"; then
        echo "Error: Failed to download YouTube video" >&2
        return 1
    fi
    
    # Check if the file exists
    if [ ! -f "$output_file" ]; then
        echo "Error: YouTube download succeeded but audio file not found" >&2
        ls -la "$temp_dir" >&2
        return 1
    fi
    
    echo "$output_file"
    return 0
}

# Check if input is a YouTube URL
if [[ "$input" =~ ^https?://(www\.)?(youtube\.com|youtu\.be) ]]; then
    echo "Detected YouTube URL" >&2
    audio_file=$(handle_youtube "$input")
else
    # Handle local file
    if [ ! -f "$input" ]; then
        echo "Error: File not found: $input" >&2
        exit 1
    fi
    audio_file=$(prepare_audio "$input")
fi

# Check if audio file exists and show its size
if [ ! -f "$audio_file" ]; then
    echo "Error: Audio file not found after processing" >&2
    exit 1
fi

echo "Audio file ready: $audio_file ($(du -h "$audio_file" | cut -f1))" >&2

# Try transcription methods in order
if ! $force_api && try_whisper_cpp "$audio_file"; then
    exit 0
fi

if ! $force_api && try_python_whisper "$audio_file"; then
    exit 0
fi

if try_whisper_api "$audio_file"; then
    exit 0
fi

echo "Error: All transcription methods failed" >&2
exit 1